"use strict";(self["webpackChunkjoshua_vue_project"]=self["webpackChunkjoshua_vue_project"]||[]).push([[515],{1515:function(t,e,r){r.d(e,{K:function(){return Bt}});var a={};r.r(a),r.d(a,{getUserRoles:function(){return y}});var n={};r.r(n),r.d(n,{createAuthUser:function(){return p},deleteAuthUser:function(){return N},getAuthUserById:function(){return _},getAuthUsers:function(){return w}});var o={};r.r(o),r.d(o,{countAgencyRecord:function(){return $},createAgency:function(){return v},deleteAgency:function(){return A},getAgencies:function(){return b},getAgenciesWithPaging:function(){return E},getAgencyById:function(){return q},updateAgency:function(){return I}});var s={};r.r(s),r.d(s,{countAlbumRecord:function(){return C},createAlbum:function(){return T},deleteAlbum:function(){return R},deleteAlbumWithRelations:function(){return O},getAlbumById:function(){return S},getAlbums:function(){return x},getAlbumsWithPaging:function(){return k},updateAlbum:function(){return D}});var c={};r.r(c),r.d(c,{countDiscographyRecord:function(){return P},createDiscography:function(){return F},deleteDiscography:function(){return W},getDiscographies:function(){return U},getDiscographiesWithPaging:function(){return L},getDiscographyById:function(){return M},updateDiscography:function(){return B}});var i={};r.r(i),r.d(i,{countEventRecord:function(){return z},createEvent:function(){return Y},deleteEvent:function(){return G},getEventById:function(){return H},getEvents:function(){return K},getEventsWithPaging:function(){return j},updateEvent:function(){return J}});var u={};r.r(u),r.d(u,{countTalentRecord:function(){return rt},createTalent:function(){return Z},deleteTalent:function(){return et},getTalentById:function(){return X},getTalents:function(){return V},getTalentsWithPaging:function(){return Q},updateTalent:function(){return tt}});var d={};r.r(d),r.d(d,{countDatasetRecord:function(){return ut},createDataset:function(){return st},deleteDataset:function(){return it},exportDataset:function(){return gt},getCountDataset:function(){return nt},getDatasetById:function(){return ot},getDatasets:function(){return at},importDataset:function(){return mt},updateDataset:function(){return ct}});var l={};r.r(l),r.d(l,{countDatasetUnprocessRecord:function(){return Nt},createDataset:function(){return wt},deleteDatasetUnprocess:function(){return pt},getCountDatasetUnprocess:function(){return ft},getDatasetUnprocess:function(){return ht},getDatasetUnprocessById:function(){return yt},updateDatasetUnprocess:function(){return _t}});var g={};r.r(g),r.d(g,{countChatgroupRecord:function(){return At},createChatgroup:function(){return qt},deleteChatgroup:function(){return It},getChatgroupsWithMessage:function(){return Et},getChatgroupsWithMessageById:function(){return bt},updateChatgroup:function(){return vt}});var m={};r.r(m),r.d(m,{countMessageRecord:function(){return Dt},createMessage:function(){return xt},deleteMessage:function(){return Tt},getMessages:function(){return $t},getMessagesById:function(){return kt},updateMessage:function(){return St}});var h={};r.r(h),r.d(h,{countTaskRecord:function(){return Ft},createTask:function(){return Lt},deleteTask:function(){return Mt},getTaskById:function(){return Ct},getTasks:function(){return Ot},getTasksWithPaging:function(){return Rt},updateTask:function(){return Ut}});var f=r(9137);const y=async()=>{const{data:t,error:e}=await f.N.from("user_role").select("*");return e?[]:t};async function w(t,e){const{data:r,error:a}=await f.N.auth.admin.listUsers({page:t,perPage:e});if(a)return[];const n=await y(),o={};n.forEach((t=>{o[t.user_id]=t.role}));const s=r.users.map((t=>({...t,user_role:o[t.id]||null})));return{items:s}}async function _(t){const{data:e,error:r}=await f.N.auth.admin.getUserById(t);return r?[]:{items:e.users}}async function p(t){try{const{data:e,error:r}=await f.N.auth.admin.createUser({email:t.email,password:t.password,email_confirm:t.email_confirm});if(r)throw new Error(r.message);return e}catch(e){throw new Error(e.message)}}async function N(t){try{const{error:e}=await f.N.auth.admin.deleteUser(t);if(e)throw new Error(e.message);return"User successfully deleted"}catch(e){throw new Error(`Failed to delete user: ${e.message}`)}}const E=async(t,e,r,a,n="")=>{try{const o=(t-1)*e;let s="\n            SELECT \n                agency.id AS id,\n                agency.agency_name AS agency_name,\n                agency.agency_status AS agency_status,\n                agency.agency_description AS agency_description,\n                COUNT(talent.id) AS talent_count\n            FROM \n                agency\n            LEFT JOIN \n                talent ON talent.agency_id = agency.id\n        ";n&&(s+=` WHERE agency_name ILIKE '%${n}%'`),s+=`\n            GROUP BY agency.id, agency.agency_name, talent.agency_id\n            ORDER BY ${r} ${"asc"===a?"ASC":"DESC"}\n        `,s+=`\n            LIMIT ${e}\n            OFFSET ${o}\n        `;const{data:c,error:i}=await f.N.rpc("execute_dynamic_query",{query:s}),u="\n            SELECT COUNT(*) FROM agency\n        ",{data:d,error:l}=await f.N.rpc("execute_dynamic_query",{query:u});if(i||l)throw i||l;const g=d[0].count;return{items:c,totalItems:g,totalPages:Math.ceil(g/e)}}catch(o){return{error:o.message}}},b=async()=>{try{const{data:t,error:e}=await f.N.from("agency").select("*");if(e)throw e;return t}catch(t){return console.error("Error fetching agencies:",t),{error:t.message}}},q=async t=>{try{const{data:e,error:r}=await f.N.from("agency").select("*,talent(*)").eq("id",t).single();if(r)throw r;const a=e.talent?e.talent.length:0;return{...e,talentCount:a}}catch(e){return console.error(`Error fetching agency with ID ${t}:`,e),{error:e.message}}},v=async t=>{try{const{data:e,error:r}=await f.N.from("agency").insert(t).single();if(r)throw r;return e}catch(e){return console.error("Error creating agency:",e),{error:e.message}}},I=async t=>{try{const{data:e,error:r}=await f.N.from("agency").update(t).eq("id",t.id).single();if(r)throw r;return e}catch(e){return console.error(`Error updating agency with ID ${id}:`,e),{error:e.message}}},A=async t=>{try{const{data:e,error:r}=await f.N.from("agency").delete().eq("id",t);if(r)throw r;return e}catch(e){return console.error(`Error deleting agency with ID ${t}:`,e),{error:e.message}}},$=async()=>{try{const{count:t,error:e}=await f.N.from("agency").select("*",{count:"exact",head:!0});if(e)throw e;return t}catch(t){return console.error("Error counting agencies:",t),{error:t.message}}},k=async(t,e,r,a,n="")=>{try{const o=(t-1)*e,s=o+e-1;let c=f.N.from("album").select("*, album_talent(talent(*)), discography(count)",{count:"exact"}).order(r,{ascending:"asc"===a}).range(o,s);n&&(c=c.or(`name.ilike.%${n}%`));const{data:i,count:u,error:d}=await c;if(d)throw d;const l=i.map((t=>({...t,talents:t.album_talent?.map((t=>t.talent?.name))||[],discography_count:t.discography.length?t.discography[0].count:0})));return{items:l,totalItems:u,totalPages:Math.ceil(u/e)}}catch(o){return{error:o.message}}},x=async()=>{try{const{data:t,error:e}=await f.N.from("album").select("*");if(e)throw e;return t}catch(t){return console.error("Error fetching albums:",t),{error:t.message}}},S=async t=>{try{const{data:e,error:r}=await f.N.from("album").select("*").eq("id",t).single();if(r)throw r;return e}catch(e){return console.error(`Error fetching album with ID ${t}:`,e),{error:e.message}}},T=async(t,e)=>{try{const{data:r,error:a}=await f.N.from("album").insert(t).select("*").single();if(a)throw a;const n=e.map((t=>({album_id:r.id,talent_id:t.id}))),{data:o,error:s}=await f.N.from("album_talent").insert(n);if(s)throw s;return{album:r,talents:o}}catch(r){return console.error("Error creating album:",r),{error:r.message}}},D=async(t,e)=>{try{const{data:r,error:a}=await f.N.from("album").update(t).eq("id",t.id).single();if(a)throw a;const n=t.id,o=e.map((t=>t.id)),{data:s,error:c}=await f.N.from("album_talent").select("talent_id").eq("album_id",n);if(c)throw c;const i=s.map((t=>t.talent_id)),u=o.filter((t=>!i.includes(t))),d=i.filter((t=>!o.includes(t)));if(u.length>0){const{error:t}=await f.N.from("album_talent").insert(u.map((t=>({album_id:n,talent_id:t}))));if(t)throw t}if(d.length>0){const{error:t}=await f.N.from("album_talent").delete().in("talent_id",d).eq("album_id",n);if(t)throw t}return{album:r,updatedTalents:o}}catch(r){return{error:r.message}}},R=async t=>{try{const{error:e}=await f.N.from("album_talent").delete().eq("album_id",t);if(e)throw new Error(`Failed to delete album_talent: ${e.message}`);const{data:r,error:a}=await f.N.from("album").delete().eq("id",t);if(a)throw new Error(`Failed to delete album: ${a.message}`);return r}catch(e){return{error:e.message}}},O=async t=>{try{const{error:e}=await f.N.from("album_talent").delete().eq("album_id",t);if(e)throw e;const{error:r}=await f.N.from("discography").delete().eq("album_id",t);if(r)throw r;const{error:a}=await f.N.from("album").delete().eq("id",t);if(a)throw a;return{success:!0}}catch(e){return{error:e.message}}},C=async()=>{try{const{count:t,error:e}=await f.N.from("album").select("*",{count:"exact",head:!0});if(e)throw e;return t}catch(t){return console.error("Error counting albums:",t),{error:t.message}}},L=async(t,e,r,a,n="")=>{try{const o=(t-1)*e,s=o+e-1;let c=f.N.from("discography").select("*, album(id,name), discography_talent(talent(id, name))",{count:"exact"}).order(r,{ascending:"asc"===a}).range(o,s);n&&(c=c.or(`name.ilike.%${n}%`));const{data:i,count:u,error:d}=await c;if(d)throw d;const l=i.map((t=>({...t,album:t.album?.name,talents:t.discography_talent?.map((t=>t.talent?.name))||[]})));return{items:l,totalItems:u,totalPages:Math.ceil(u/e)}}catch(o){return{error:o.message}}},U=async()=>{try{const{data:t,error:e}=await f.N.from("discography").select("*");if(e)throw e;return t}catch(t){return console.error("Error fetching discographies:",t),{error:t.message}}},M=async t=>{try{const{data:e,error:r}=await f.N.from("discography").select("*").eq("id",t).single();if(r)throw r;return e}catch(e){return console.error(`Error fetching discography with ID ${t}:`,e),{error:e.message}}},F=async(t,e)=>{try{const{data:r,error:a}=await f.N.from("discography").insert(t).select("*").single();if(a)throw a;const n=e.map((t=>({discography_id:r.id,talent_id:t.id}))),{data:o,error:s}=await f.N.from("discography_talent").insert(n);if(s)throw s;return{discography:r,talents:o}}catch(r){return{error:r.message}}},B=async(t,e)=>{try{const{data:r,error:a}=await f.N.from("discography").update(t).eq("id",t.id).single();if(a)throw a;const n=t.id,o=e.map((t=>t.id)),{data:s,error:c}=await f.N.from("discography_talent").select("talent_id").eq("discography_id",n);if(c)throw c;const i=s.map((t=>t.talent_id)),u=o.filter((t=>!i.includes(t))),d=i.filter((t=>!o.includes(t)));if(u.length>0){const{error:t}=await f.N.from("discography_talent").insert(u.map((t=>({discography_id:n,talent_id:t}))));if(t)throw t}if(d.length>0){const{error:t}=await f.N.from("discography_talent").delete().in("talent_id",d).eq("discography_id",n);if(t)throw t}return{discography:r,updatedTalents:o}}catch(r){return{error:r.message}}},W=async t=>{try{const{error:e}=await f.N.from("discography_talent").delete().eq("discography_id",t);if(e)throw new Error(`Failed to delete discography_talent: ${e.message}`);const{data:r,error:a}=await f.N.from("discography").delete().eq("id",t);if(a)throw new Error(`Failed to delete discography: ${a.message}`);return r}catch(e){return{error:e.message}}},P=async()=>{try{const{count:t,error:e}=await f.N.from("discography").select("*",{count:"exact",head:!0});if(e)throw e;return t}catch(t){return console.error("Error counting discographies:",t),{error:t.message}}},j=async(t,e,r,a,n="")=>{try{const o=(t-1)*e,s=o+e-1;let c=f.N.from("event").select("*, event_talent(talent(id, name))",{count:"exact"}).order(r,{ascending:"asc"===a}).range(o,s);n&&(c=c.or(`event_title.ilike.%${n}%,event_summary.ilike.%${n}%,event_hashtag.ilike.%${n}%`));const{data:i,count:u,error:d}=await c;if(d)throw d;const l=i.map((t=>({...t,talents:t.event_talent?.map((t=>t.talent?.name))||[]})));return{items:l,totalItems:u,totalPages:Math.ceil(u/e)}}catch(o){return{error:o.message}}},K=async()=>{try{const{data:t,error:e}=await f.N.from("event").select("*");if(e)throw e;return t}catch(t){return{error:t.message}}},H=async t=>{try{const{data:e,error:r}=await f.N.from("event").select("*").eq("id",t).single();if(r)throw r;return e}catch(e){return{error:e.message}}},Y=async(t,e)=>{try{const{data:r,error:a}=await f.N.from("event").insert(t).select("*").single();if(a)throw a;const n=e.map((t=>({event_id:r.id,talent_id:t.id}))),{data:o,error:s}=await f.N.from("event_talent").insert(n);if(s)throw s;return{event:r,talents:o}}catch(r){return{error:r.message}}},J=async(t,e)=>{try{const{data:r,error:a}=await f.N.from("event").update(t).eq("id",t.id).single();if(a)throw a;const n=t.id,o=e.map((t=>t.id)),{data:s,error:c}=await f.N.from("event_talent").select("talent_id").eq("event_id",n);if(c)throw c;const i=s.map((t=>t.talent_id)),u=o.filter((t=>!i.includes(t))),d=i.filter((t=>!o.includes(t)));if(u.length>0){const{error:t}=await f.N.from("event_talent").insert(u.map((t=>({event_id:n,talent_id:t}))));if(t)throw t}if(d.length>0){const{error:t}=await f.N.from("event_talent").delete().in("talent_id",d).eq("event_id",n);if(t)throw t}return{event:r,updatedTalents:o}}catch(r){return{error:r.message}}},G=async t=>{try{const{error:e}=await f.N.from("event_talent").delete().eq("event_id",t);if(e)throw new Error(`Failed to delete event_talent: ${e.message}`);const{data:r,error:a}=await f.N.from("event").delete().eq("id",t);if(a)throw new Error(`Failed to delete event: ${a.message}`);return r}catch(e){return{error:e.message}}},z=async()=>{try{const{count:t,error:e}=await f.N.from("event").select("*",{count:"exact",head:!0});if(e)throw e;return t}catch(t){return{error:t.message}}},Q=async(t,e,r,a,n="")=>{try{const o=(t-1)*e,s=`LIMIT ${e} OFFSET ${o}`;let c="\n            SELECT \n                talent.id AS id,\n                talent.name AS name,\n                talent.original_name AS original_name,\n                talent.debut_date AS debut_date,\n                talent.talent_status AS talent_status,\n                talent.retirement_date AS retirement_date,\n                talent.date_of_birth AS date_of_birth,\n                talent.gender AS gender,\n                talent.height AS height,\n                talent.emoji AS emoji,\n                agency.id AS agency_id,\n                agency.agency_name AS agency,\n                COUNT(album_talent.album_id) AS album_count,\n                COUNT(discography_talent.discography_id) AS discography_count\n            FROM \n                talent\n            LEFT JOIN \n                album_talent ON talent.id = album_talent.talent_id\n            LEFT JOIN \n                discography_talent ON talent.id = discography_talent.talent_id\n            LEFT JOIN \n                agency ON talent.agency_id = agency.id\n        ";n&&(c+=` WHERE talent.name ILIKE '%${n}%' OR talent.original_name ILIKE '%${n}%'`),c+=`\n            GROUP BY talent.id, agency.id, agency.agency_name, album_talent.talent_id, discography_talent.talent_id\n            ORDER BY ${r} ${"asc"===a?"ASC":"DESC"}\n            ${s}\n        `;const{data:i,error:u}=await f.N.rpc("execute_dynamic_query",{query:c});if(u)throw u;const d="\n            SELECT COUNT(*) AS total_count\n            FROM talent\n        ",{data:l,error:g}=await f.N.rpc("execute_dynamic_query",{query:d});if(g)throw g;const m=l[0]?.total_count||0;return{items:i,totalItems:m,totalPages:Math.ceil(m/e)}}catch(o){return console.error("Error fetching talents:",o),{error:o.message}}},V=async()=>{try{const{data:t,error:e}=await f.N.from("talent").select("id, name").order("name",{ascending:!0});if(e)throw e;return t}catch(t){return console.error("Error fetching talents:",t),{error:t.message}}},X=async t=>{try{const{data:e,error:r}=await f.N.from("talent").select("*, agency(*)").eq("id",t).single();if(r)throw r;return e}catch(e){return console.error(`Error fetching talent with ID ${t}:`,e),{error:e.message}}},Z=async t=>{try{const{data:e,error:r}=await f.N.from("talent").insert(t).single();if(r)throw r;return e}catch(e){return console.error("Error creating talent:",e),{error:e.message}}},tt=async t=>{try{const{data:e,error:r}=await f.N.from("talent").update(t).eq("id",t.id).single();if(r)throw r;return e}catch(e){return console.error(`Error updating talent with ID ${id}:`,e),{error:e.message}}},et=async t=>{try{const{data:e,error:r}=await f.N.from("talent").delete().eq("id",t);if(r)throw r;return e}catch(e){return console.error(`Error deleting talent with ID ${t}:`,e),{error:e.message}}},rt=async()=>{try{const{count:t,error:e}=await f.N.from("talent").select("*",{count:"exact",head:!0});if(e)throw e;return t}catch(t){return console.error("Error counting talents:",t),{error:t.message}}},at=async(t,e,r,a,n="")=>{try{const o=(t-1)*e,s=o+e-1;let c=f.N.from("dataset").select("id, source_text, target_text, source, category").order(r,{ascending:"asc"===a}).range(o,s);n&&(c=c.or(`source_text.ilike.%${n}%,target_text.ilike.%${n}%`));const{data:i,error:u}=await c;return u?0:i}catch(o){return 0}},nt=async t=>{try{let e="\n            SELECT\n                COUNT(id)\n            FROM \n                dataset\n        ";t&&(e+=`\n                WHERE \n                    lower(source_text) LIKE '%${t.toLowerCase()}%' \n                    OR lower(target_text) LIKE '%${t.toLowerCase()}%'\n        `),e+="LIMIT 1";const{data:r,error:a}=await f.N.rpc("execute_dynamic_query",{query:e});return a?{error:a}:r[0].count}catch(e){return{error:e.message}}},ot=async t=>{try{const{data:e,error:r}=await f.N.from("dataset").select("*").eq("id",t).single();if(r)throw r;return e}catch(e){return console.error(`Error fetching dataset with ID ${t}:`,e),{error:e.message}}},st=async t=>{try{const{data:e,error:r}=await f.N.from("dataset").insert(t).single();if(r)throw r;return e}catch(e){return console.error("Error creating dataset:",e),{error:e.message}}},ct=async t=>{try{const{data:e,error:r}=await f.N.from("dataset").update(t).eq("id",t.id).single();if(r)throw r;return e}catch(e){return console.error(`Error updating dataset with ID ${id}:`,e),{error:e.message}}},it=async t=>{try{const{data:e,error:r}=await f.N.from("dataset").delete().eq("id",t);if(r)throw r;return e}catch(e){return console.error(`Error deleting dataset with ID ${t}:`,e),{error:e.message}}},ut=async()=>{try{const{count:t,error:e}=await f.N.from("dataset").select("*",{count:"exact",head:!0});if(e)throw e;return t}catch(t){return console.error("Error counting datasets:",t),{error:t.message}}},dt=t=>{const e=t=>{if("string"===typeof t){const e=t.replace(/"/g,'""');return`"${e}"`}return t},r=Object.keys(t[0]).map(e).join(",")+"\n",a=t.map((t=>Object.values(t).map(e).join(","))).join("\n");return r+a},lt=t=>{const[e,...r]=t.split("\n"),a=e.split(",");return r.map((t=>{const e=t.split(",");return a.reduce(((t,r,a)=>(t[r.trim()]=e[a].trim(),t)),{})}))},gt=async(t,e,r)=>{try{let a=`\n            SELECT\n                source_text,\n                target_text\n            FROM \n                dataset\n            WHERE \n                (array_length(regexp_split_to_array(source_text, '\\s+'), 1) <= ${e})\n                AND\n                (array_length(regexp_split_to_array(target_text, '\\s+'), 1) <= ${r})\n        `;const{data:n,error:o}=await f.N.rpc("execute_dynamic_query",{query:a});if(o)throw o;const s=dt(n),c=new Blob([s],{type:"text/csv;charset=utf-8;"}),i=document.createElement("a"),u=URL.createObjectURL(c);return i.setAttribute("href",u),i.setAttribute("download",t?`${t}.csv`:"export.csv"),i.style.visibility="hidden",document.body.appendChild(i),i.click(),document.body.removeChild(i),{success:!0,message:"Export successful"}}catch(a){return{success:!1,message:`Error exporting data: ${a.message}`}}},mt=async t=>{const e=t.target.files[0];if(!e)return;const r=new FileReader;r.onload=async()=>{const t=r.result;let a;if(e.name.endsWith(".csv")?a=lt(t):e.name.endsWith(".json")&&(a=JSON.parse(t)),a)try{const{error:t}=await f.N.from("your_table_name").insert(a);if(t)throw t;alert("Data imported successfully")}catch(n){console.error("Error importing data:",n.message)}},r.readAsText(e)},ht=async(t,e,r,a,n="")=>{try{const o=(t-1)*e,s=o+e-1;let c=f.N.from("dataset_unprocess").select("id, source_text, target_text").order(r,{ascending:"asc"===a}).range(o,s);n&&(c=c.or(`source_text.ilike.%${n}%,target_text.ilike.%${n}%`));const{data:i,error:u}=await c;return u?0:i}catch(o){return 0}},ft=async t=>{try{let e="\n            SELECT\n                COUNT(id)\n            FROM \n                dataset_unprocess\n        ";t&&(e+=`\n                WHERE \n                    lower(source_text) LIKE '%${t.toLowerCase()}%' \n                    OR lower(target_text) LIKE '%${t.toLowerCase()}%'\n        `),e+="LIMIT 1";const{data:r,error:a}=await f.N.rpc("execute_dynamic_query",{query:e});return a?{error:a}:r[0].count}catch(e){return{error:e.message}}},yt=async t=>{try{const{data:e,error:r}=await f.N.from("dataset_unprocess").select("*").eq("id",t).single();if(r)throw r;return e}catch(e){return{error:e.message}}},wt=async t=>{try{const{data:e,error:r}=await f.N.from("dataset_unprocess").insert(t).single();if(r)throw r;return e}catch(e){return{error:e.message}}},_t=async t=>{try{const{data:e,error:r}=await f.N.from("dataset_unprocess").update(t).eq("id",t.id).single();if(r)throw r;return e}catch(e){return{error:e.message}}},pt=async t=>{try{const{data:e,error:r}=await f.N.from("dataset_unprocess").delete().eq("id",t);if(r)throw r;return e}catch(e){return{error:e.message}}},Nt=async()=>{try{const{count:t,error:e}=await f.N.from("dataset_unprocess").select("*",{count:"exact",head:!0});if(e)throw e;return t}catch(t){return{error:t.message}}},Et=async()=>{try{let t=f.N.from("chatgroup").select("*,message(*)",{count:"exact"});const{data:e,count:r,error:a}=await t;if(a)throw a;return{items:e}}catch(t){return{error:t.message}}},bt=async t=>{try{const{data:e,error:r}=await f.N.from("chatgroup").select("*").eq("id",t).single();if(r)throw r;return e}catch(e){return{error:e.message}}},qt=async t=>{try{const{data:e,error:r}=await f.N.from("chatgroup").insert(t).single();if(r)throw r;return e}catch(e){return{error:e.message}}},vt=async t=>{try{const{data:e,error:r}=await f.N.from("chatgroup").update(t).eq("id",t.id).single();if(r)throw r;return e}catch(e){return{error:e.message}}},It=async t=>{try{const{data:e,error:r}=await f.N.from("chatgroup").delete().eq("id",t);if(r)throw r;return e}catch(e){return{error:e.message}}},At=async()=>{try{const{count:t,error:e}=await f.N.from("chatgroup").select("*",{count:"exact",head:!0});if(e)throw e;return t}catch(t){return{error:t.message}}},$t=async()=>{try{let t=f.N.from("message").select("*",{count:"exact"});const{data:e,count:r,error:a}=await t;if(a)throw a;return{items:e}}catch(t){return{error:t.message}}},kt=async t=>{try{const{data:e,error:r}=await f.N.from("message").select("*").eq("id",t).single();if(r)throw r;return e}catch(e){return{error:e.message}}},xt=async t=>{try{const{data:e,error:r}=await f.N.from("message").insert(t).single();if(r)throw r;return e}catch(e){return{error:e.message}}},St=async t=>{try{const{data:e,error:r}=await f.N.from("message").update(t).eq("id",t.id).single();if(r)throw r;return e}catch(e){return{error:e.message}}},Tt=async t=>{try{const{data:e,error:r}=await f.N.from("message").delete().eq("id",t);if(r)throw r;return e}catch(e){return{error:e.message}}},Dt=async()=>{try{const{count:t,error:e}=await f.N.from("message").select("*",{count:"exact",head:!0});if(e)throw e;return t}catch(t){return{error:t.message}}},Rt=async(t,e,r,a,n="")=>{try{const o=(t-1)*e,s=`LIMIT ${e} OFFSET ${o}`;let c="\n            SELECT \n                task.id AS id,\n                task.title AS title,\n                task.description AS description,\n                task.task_priority AS task_priority,\n                task.task_status AS task_status,\n                task.assigned_to AS assigned_to,\n                task.created_at AS created_at,\n            FROM \n                task\n        ";n&&(c+=` WHERE task.title ILIKE '%${n}%'`),c+=`\n            GROUP BY task.id, task.title\n            ORDER BY ${r} ${"asc"===a?"ASC":"DESC"}\n            ${s}\n        `;const{data:i,error:u}=await f.N.rpc("execute_dynamic_query",{query:c});if(u)throw u;const d="\n            SELECT COUNT(*) AS total_count\n            FROM task\n        ",{data:l,error:g}=await f.N.rpc("execute_dynamic_query",{query:d});if(g)throw g;const m=l[0]?.total_count||0;return{items:i,totalItems:m,totalPages:Math.ceil(m/e)}}catch(o){return console.error("Error fetching tasks:",o),{error:o.message}}},Ot=async()=>{try{const{data:t,error:e}=await f.N.from("task").select("*");if(e)throw e;const r=[{status:"refinement",tasks:[]},{status:"to_do",tasks:[]},{status:"in_progress",tasks:[]},{status:"review",tasks:[]},{status:"testing",tasks:[]},{status:"completed",tasks:[]}];return t.forEach((t=>{const e=r.find((e=>e.status===t.status));e&&e.tasks.push(t)})),r}catch(t){return{error:t.message}}},Ct=async t=>{try{const{data:e,error:r}=await f.N.from("task").select("*").eq("id",t).single();if(r)throw r;return e}catch(e){return{error:e.message}}},Lt=async t=>{try{const{data:e,error:r}=await f.N.from("task").insert(t).single();if(r)throw r;return e}catch(e){return{error:e.message}}},Ut=async t=>{try{const{data:e,error:r}=await f.N.from("task").update(t).eq("id",t.id).single();if(r)throw r;return e}catch(e){return{error:e.message}}},Mt=async t=>{try{const{data:e,error:r}=await f.N.from("task").delete().eq("id",t);if(r)throw r;return e}catch(e){return{error:e.message}}},Ft=async()=>{try{const{count:t,error:e}=await f.N.from("task").select("*",{count:"exact",head:!0});if(e)throw e;return t}catch(t){return{error:t.message}}},Bt={...n,...o,...s,...c,...i,...u,...d,...l,...g,...m,...a,...h}}}]);